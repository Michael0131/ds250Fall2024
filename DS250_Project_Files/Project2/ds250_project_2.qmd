---
title: "Client Report - Project 2"
subtitle: "Course DS 250"
author: "Michael Johnson"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

_THIS `.qmd` FILE SHOULD BE USED TO WRITE YOUR REPORT.  YOU WILL NEED TO COMPILE THE REPORT INTO A `.html` DOCUMENT AND SUBMIT IT ON CANVAS._

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
from lets_plot import *
LetsPlot.setup_html()

import ssl
ssl._create_default_https_context = ssl._create_unverified_context

```


```{python}
# Load any data you need for the report
# df = pd.read_csv('filename.csv')

```


## Elevator pitch

PLACE YOUR "30 SECOND" SALES PITCH HERE.  What are you trying to show in this report?


```{python}
# Any code for your pitch

```

## |Task 1
# Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value. 


ADD YOUR COMMENTS HERE. Explain any data, charts or tables

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd
import numpy as np
from lets_plot import *
LetsPlot.setup_html()
# Ensure the correct file path and method for reading
file_path = "flights_missing.json"  # Update with the actual path to your CSV file
df = pd.read_json(file_path)

# Ensure the correct file path and method for reading
file_path = "flights_missing.json"  # Update with the actual path to your file
df = pd.read_json(file_path)

# Replace the varied missing values with np.nan as discussed in the article
df = df.replace({"1500+": np.nan, -999: np.nan})

# Convert np.nan values to the string "NaN" for reporting purposes only
df = df.replace({np.nan: "NaN"})

# Print one row from the DataFrame to show the changes, with "NaN" as missing values
print(df.iloc[0].to_json())



```

## |Task 2
# Which airport has the worst delays? Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.


The data includes information on flights from various airports, such as the total number of flights, the number of delayed flights, and the total minutes of delay. A summary table was created to present key metrics for each airport: total flights, total delayed flights, proportion of delayed flights, and average delay time in hours. This table allows us to compare airports based on delay frequency and duration. Using these metrics, the analysis identified the worst-performing airport by prioritizing high delay proportions and, when frequencies were close, selecting the airport with the longest average delay time. This approach highlights airports with both frequent and severe delays, offering a clear view of their performance.

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd
import numpy as np
from lets_plot import *

# Setup for LetsPlot visualization
LetsPlot.setup_html()

# Load data
file_path = "flights_missing.json"  # Ensure the correct file path is specified
df = pd.read_json(file_path)

# Calculate required metrics
airport_delays = df.groupby("airport_code").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_delays=("num_of_delays_total", "sum"),
    total_delay_minutes=("minutes_delayed_total", "sum")
).reset_index()

# Calculate additional columns for analysis
airport_delays["proportion_delayed_flights"] = airport_delays["total_delays"] / airport_delays["total_flights"]
airport_delays["average_delay_hours"] = (airport_delays["total_delay_minutes"] / airport_delays["total_delays"]) / 60

# Sort by proportion of delayed flights and average delay hours
airport_delays = airport_delays.sort_values(by=["proportion_delayed_flights", "average_delay_hours"], ascending=[False, False])

# Define threshold for "close" delay frequencies
proportion_threshold = 0.02  # e.g., within 2% difference in delay frequency

# Find the airport with the highest delay proportion
highest_delay_proportion = airport_delays["proportion_delayed_flights"].max()
high_frequency_airports = airport_delays[
    airport_delays["proportion_delayed_flights"] >= highest_delay_proportion - proportion_threshold
]

# Among the high-frequency delay airports, select the one with the longest delay hours
if len(high_frequency_airports) > 1:
    # Sort by average delay hours within the high-frequency group to find the longest delays
    worst_airport = high_frequency_airports.sort_values(by="average_delay_hours", ascending=False).head(1)
else:
    # If there's only one airport in the high-frequency group, it is the "worst" airport
    worst_airport = high_frequency_airports

# Display results
print("Airport Delay Summary:")
print(airport_delays)
print("\nWorst Airport Based on High Delay Frequency and Long Delay Duration:")
print(worst_airport)

```



## |Task 3
# What is the best month to fly if you want to avoid delays of any length? Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)


The data includes monthly flight statistics from various airports, detailing the total number of flights, the number of delayed flights, and the proportion of delays. To identify the best month to avoid delays, the metric chosen was the proportion of delayed flights, calculated as the number of delayed flights divided by the total flights for each month. This normalized metric allows for a fair comparison of delay rates across months. The line chart visualizes this proportion over the year, with each month ordered on the x-axis from January to December. The chart clearly highlights trends in delays, making it easy to see which month has the lowest proportion of delayed flights, thus representing the best time to fly to minimize delays.

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd
import numpy as np
from lets_plot import *

# Setup for LetsPlot visualization
LetsPlot.setup_html()

# Load data
file_path = "flights_missing.json"  # Ensure the correct file path is specified
df = pd.read_json(file_path)

# Define a mapping from month names to numeric values
month_mapping = {
    'January': 1, 'Febuary': 2, 'February': 2, 'March': 3, 'April': 4,
    'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9,
    'October': 10, 'November': 11, 'December': 12
}

# Create a reverse mapping from numbers back to month names
reverse_month_mapping = {v: k for k, v in month_mapping.items()}
reverse_month_mapping[2] = 'February'  # Correct the typo in the reverse map

# Replace 'n/a' with NaN explicitly
df["month"] = df["month"].replace('n/a', np.nan)

# Apply the month mapping to convert names to numbers and explicitly cast as integer
df["month"] = df["month"].replace(month_mapping).astype(float).astype("Int64")

# Remove rows where 'month' is still missing after mapping
df = df.dropna(subset=["month"])

# Convert month to integer type
df["month"] = df["month"].astype(int)

# Calculate total flights and total delays for each month
monthly_delays = df.groupby("month").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_delays=("num_of_delays_total", "sum")
).reset_index()

# Calculate proportion of delays
monthly_delays["proportion_delayed_flights"] = monthly_delays["total_delays"] / monthly_delays["total_flights"]

# Identify the best month to fly (with the lowest delay proportion)
best_month_num = monthly_delays.loc[monthly_delays["proportion_delayed_flights"].idxmin(), "month"]
best_month_name = reverse_month_mapping[best_month_num]

# Display the best month by name
print(f"The best month to fly to avoid delays is: {best_month_name}")

# Create a line graph showing the proportion of delayed flights by month
plot = ggplot(monthly_delays, aes(x="month", y="proportion_delayed_flights")) + \
    geom_line(size=1.5) + \
    geom_point(size=3) + \
    ggtitle("Proportion of Delayed Flights by Month") + \
    xlab("Month") + \
    ylab("Proportion of Delayed Flights") + \
    scale_x_continuous(breaks=list(range(1, 13))) + \
    scale_y_continuous(breaks=np.arange(0, monthly_delays["proportion_delayed_flights"].max() + 0.02, 0.02))

plot

```



## |Task 4
# According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:

# A. 100% of delayed flights in the Weather category are due to weather
# B. 30% of all delayed flights in the Late-Arriving category are due to weather
# C. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%

The data provides monthly statistics on flight delays, including various categories that contribute to delay counts, such as weather, late-arriving aircraft, and NAS delays. To capture the full impact of weather on delays, we created a new column, total_weather_delays, which aggregates both severe and mild weather delays according to specific rules: severe weather delays are fully accounted for in the Weather category, while mild delays are partially attributed to the Late-Arriving Aircraft and NAS categories based on seasonal variations. The table shown includes the calculated total_weather_delays alongside the original delay categories, offering a comprehensive view of weather-related delay contributions across different months.

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd
import numpy as np

# Load data
file_path = "flights_missing.json"  # Ensure the correct file path is specified
df = pd.read_json(file_path)

# Replace 'n/a' in the month column with NaN explicitly
df["month"] = df["month"].replace('n/a', np.nan)

# Define month mapping for any month names that might need it
month_mapping = {
    'January': 1, 'Febuary': 2, 'February': 2, 'March': 3, 'April': 4,
    'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9,
    'October': 10, 'November': 11, 'December': 12
}

# Map month names to numbers separately to avoid implicit downcasting
df["month"] = df["month"].replace(month_mapping)
df = df.dropna(subset=["month"])  # Drop rows where month is still missing

# Convert month to integer type explicitly
df["month"] = df["month"].astype(int)

# Replace -999 values in 'num_of_delays_late_aircraft' with NaN
df["num_of_delays_late_aircraft"] = df["num_of_delays_late_aircraft"].replace(-999, np.nan)

# 1. Replace missing values in 'num_of_delays_late_aircraft' with the mean
mean_late_aircraft_delay = df["num_of_delays_late_aircraft"].mean(skipna=True)
df["num_of_delays_late_aircraft"] = df["num_of_delays_late_aircraft"].fillna(mean_late_aircraft_delay)

# 2. Calculate 'total_weather_delays' based on rules A, B, and C
# Rule A: 100% of 'num_of_delays_weather' are due to severe weather
df["weather_delay_severe"] = df["num_of_delays_weather"]

# Rule B: 30% of 'num_of_delays_late_aircraft' are due to mild weather
df["weather_delay_late_aircraft"] = 0.3 * df["num_of_delays_late_aircraft"]

# Rule C: For 'num_of_delays_nas', use different proportions based on the month
df["weather_delay_nas"] = np.where(
    df["month"].between(4, 8),  # April to August
    0.4 * df["num_of_delays_nas"],  # 40% due to weather
    0.65 * df["num_of_delays_nas"]  # 65% due to weather for other months
)

# Sum up all weather-related delays
df["total_weather_delays"] = df["weather_delay_severe"] + df["weather_delay_late_aircraft"] + df["weather_delay_nas"]

# Print the first 5 rows of the data to show the new column
print(df[["month", "num_of_delays_weather", "num_of_delays_late_aircraft", "num_of_delays_nas", "total_weather_delays"]].head())

```



## |Task 5
# Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.


The bar chart titled "Proportion of Flights Delayed by Weather at Each Airport" illustrates the percentage of flights delayed due to weather at various airports. Each bar represents an airport, with the height of the bar showing the proportion of total flights that experienced weather-related delays. From the chart, we can see that airports like SFO and ORD have the highest proportions of weather-related delays, indicating that flights at these locations are more frequently impacted by adverse weather conditions. Conversely, airports like SLC and DEN have lower proportions of weather delays, suggesting they may experience more favorable weather conditions or better management of mild weather delays. This information can be useful for travelers or airlines planning to minimize weather-induced disruptions.

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

import pandas as pd
import numpy as np
from lets_plot import *

# Load data
file_path = "flights_missing.json"  # Ensure the correct file path is specified
df = pd.read_json(file_path)

# Setup for LetsPlot visualization
LetsPlot.setup_html()

# Define month mapping for any month names that might need it
month_mapping = {
    'January': 1, 'Febuary': 2, 'February': 2, 'March': 3, 'April': 4,
    'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9,
    'October': 10, 'November': 11, 'December': 12
}

# Replace 'n/a' and other missing indicators in the month column with NaN explicitly
df["month"] = df["month"].replace('n/a', np.nan)

# Apply the month mapping to convert names to numbers
df["month"] = df["month"].replace(month_mapping)

# Drop rows where 'month' is still missing after mapping
df = df.dropna(subset=["month"])

# Convert month to integer type explicitly
df["month"] = df["month"].astype(int)

# Replace -999 values in 'num_of_delays_late_aircraft' with NaN
df["num_of_delays_late_aircraft"] = df["num_of_delays_late_aircraft"].replace(-999, np.nan)

# Replace missing values in 'num_of_delays_late_aircraft' with the mean
mean_late_aircraft_delay = df["num_of_delays_late_aircraft"].mean(skipna=True)
df["num_of_delays_late_aircraft"] = df["num_of_delays_late_aircraft"].fillna(mean_late_aircraft_delay)

# Calculate 'total_weather_delays' based on rules A, B, and C
# Rule A: 100% of 'num_of_delays_weather' are due to severe weather
df["weather_delay_severe"] = df["num_of_delays_weather"]

# Rule B: 30% of 'num_of_delays_late_aircraft' are due to mild weather
df["weather_delay_late_aircraft"] = 0.3 * df["num_of_delays_late_aircraft"]

# Rule C: For 'num_of_delays_nas', use different proportions based on the month
df["weather_delay_nas"] = np.where(
    df["month"].between(4, 8),  # April to August
    0.4 * df["num_of_delays_nas"],  # 40% due to weather
    0.65 * df["num_of_delays_nas"]  # 65% due to weather for other months
)

# Sum up all weather-related delays
df["total_weather_delays"] = df["weather_delay_severe"] + df["weather_delay_late_aircraft"] + df["weather_delay_nas"]

# Calculate the proportion of weather-related delays at each airport
df["proportion_weather_delays"] = df["total_weather_delays"] / df["num_of_flights_total"]

# Aggregate data to get the proportion of weather delays per airport
airport_weather_delays = df.groupby("airport_code").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_weather_delays=("total_weather_delays", "sum")
).reset_index()

# Calculate the proportion for each airport and convert it to a percentage
airport_weather_delays["proportion_weather_delays"] = (
    airport_weather_delays["total_weather_delays"] / airport_weather_delays["total_flights"]
) * 100  # Convert to percentage

# Create a barplot showing the proportion of flights delayed by weather at each airport
plot = ggplot(airport_weather_delays, aes(x="airport_code", y="proportion_weather_delays")) + \
    geom_bar(stat="identity") + \
    ggtitle("Proportion of Flights Delayed by Weather at Each Airport") + \
    xlab("Airport") + \
    ylab("Proportion of Weather Delays (%)") + \
    scale_y_continuous(breaks=list(range(0, int(airport_weather_delays["proportion_weather_delays"].max()) + 5, 5)))

plot
```

